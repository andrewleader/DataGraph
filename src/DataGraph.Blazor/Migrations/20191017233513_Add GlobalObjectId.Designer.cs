// <auto-generated />
using DataGraph.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataGraph.Migrations
{
    [DbContext(typeof(DataGraphContext))]
    [Migration("20191017233513_Add GlobalObjectId")]
    partial class AddGlobalObjectId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataGraph.Models.DataGraphInstance", b =>
                {
                    b.Property<string>("CustomerId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GlobalObjectId");

                    b.Property<string>("Name");

                    b.Property<string>("SchemaJson")
                        .HasColumnName("Schema");

                    b.HasKey("CustomerId", "Id");

                    b.ToTable("DataGraph");
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphListOfLiteralsPropertyValue", b =>
                {
                    b.Property<string>("CustomerId");

                    b.Property<int>("GraphId");

                    b.Property<int>("ObjectId");

                    b.Property<string>("PropertyName");

                    b.Property<int>("ListItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ListItemValueJson");

                    b.HasKey("CustomerId", "GraphId", "ObjectId", "PropertyName", "ListItemId");

                    b.HasAlternateKey("CustomerId", "GraphId", "ListItemId", "ObjectId", "PropertyName");

                    b.ToTable("ListOfLiterals");
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphListOfReferencesPropertyValue", b =>
                {
                    b.Property<string>("CustomerId");

                    b.Property<int>("GraphId");

                    b.Property<int>("ObjectId");

                    b.Property<string>("PropertyName");

                    b.Property<int>("ListItemId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReferencedObjectId");

                    b.HasKey("CustomerId", "GraphId", "ObjectId", "PropertyName", "ListItemId");

                    b.HasAlternateKey("CustomerId", "GraphId", "ListItemId", "ObjectId", "PropertyName");

                    b.HasIndex("CustomerId", "GraphId", "ReferencedObjectId");

                    b.ToTable("ListOfReferences");
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphLiteralPropertyValue", b =>
                {
                    b.Property<string>("CustomerId");

                    b.Property<int>("GraphId");

                    b.Property<int>("ObjectId");

                    b.Property<string>("PropertyName");

                    b.Property<string>("ProperyValueJson");

                    b.HasKey("CustomerId", "GraphId", "ObjectId", "PropertyName");

                    b.ToTable("LiteralPropertyValues");
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphObject", b =>
                {
                    b.Property<string>("CustomerId");

                    b.Property<int>("GraphId");

                    b.Property<int>("ObjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ObjectType");

                    b.Property<string>("UserId");

                    b.HasKey("CustomerId", "GraphId", "ObjectId");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphReferencePropertyValue", b =>
                {
                    b.Property<string>("CustomerId");

                    b.Property<int>("GraphId");

                    b.Property<int>("ObjectId");

                    b.Property<string>("PropertyName");

                    b.Property<int>("ReferencedObjectId");

                    b.HasKey("CustomerId", "GraphId", "ObjectId", "PropertyName");

                    b.HasIndex("CustomerId", "GraphId", "ReferencedObjectId");

                    b.ToTable("ReferencePropertyValues");
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphListOfLiteralsPropertyValue", b =>
                {
                    b.HasOne("DataGraph.Models.DataGraphObject", "Object")
                        .WithMany("ListOfLiteralsPropertyValues")
                        .HasForeignKey("CustomerId", "GraphId", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphListOfReferencesPropertyValue", b =>
                {
                    b.HasOne("DataGraph.Models.DataGraphObject", "Object")
                        .WithMany("ListOfReferencesPropertyValues")
                        .HasForeignKey("CustomerId", "GraphId", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataGraph.Models.DataGraphObject", "ReferencedObject")
                        .WithMany()
                        .HasForeignKey("CustomerId", "GraphId", "ReferencedObjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphLiteralPropertyValue", b =>
                {
                    b.HasOne("DataGraph.Models.DataGraphObject", "Object")
                        .WithMany("LiteralPropertyValues")
                        .HasForeignKey("CustomerId", "GraphId", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphObject", b =>
                {
                    b.HasOne("DataGraph.Models.DataGraphInstance", "Graph")
                        .WithMany("Objects")
                        .HasForeignKey("CustomerId", "GraphId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataGraph.Models.DataGraphReferencePropertyValue", b =>
                {
                    b.HasOne("DataGraph.Models.DataGraphObject", "Object")
                        .WithMany("ReferencePropertyValues")
                        .HasForeignKey("CustomerId", "GraphId", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataGraph.Models.DataGraphObject", "ReferencedObject")
                        .WithMany()
                        .HasForeignKey("CustomerId", "GraphId", "ReferencedObjectId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
